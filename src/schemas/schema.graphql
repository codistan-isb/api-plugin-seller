input accountBookInput {
  AccountTitle: String
  swiftCode: String
  AccountNo: String
  isActive: Boolean
  AccountId: ID!
  AccountBookId: ID
}

enum BrandSortByField {
  createdAt
}

type AccountBook {
  _id: ID!
  AccountTitle: String
  swiftCode: String
  AccountNo: String
  isActive: Boolean
}

type SellerDiscounts implements Node {
  _id: ID!
  code: String!
  isValid: Boolean
  description: String
  createdAt: DateTime
  updatedAt: DateTime
}

enum SellerDiscountType {
  COMMISSION
}

input SellerDiscountCodeInput {
  code: String!
  isValid: Boolean
  description: String
  "value in percentage"
  value: Float!
  type: SellerDiscountType!
}

input AvailableFulfillmentMethodInput {
  AccountId: ID!
  FulfillmentMethodId: ID!
  status: Boolean!
}

input BrandInput {
  _id: ID
  brandName: String
  brandCategory: [String]
}
type createBrandPayload {
  _id: ID
  brandName: String
  brandCategory: [String]
  # brandProduct: [Product]
}

input updateBrandInput {
  brandName: String
  brandCategory: [String]
}
type updateBrandPayload {
  _id: ID
  brandName: String
  brandCategory: [String]
  brandProduct: [Product]
}

type updateBrandConnection {
  edges: [updateBrandEdge]
  nodes: [updateBrandPayload]
  pageInfo: PageInfo!
  totalCount: Int!
}
type updateBrandEdge {
  cursor: ConnectionCursor!
  node: updateBrandPayload
}

scalar AvailableFulfillmentMethod

extend type ProductVariant {
  uploadedBy: uploadedBy
  ancestorId: ID
  parentId: ID
}
extend input ProductVariantInput {
  uploadedBy: uploadedByinput
}

extend type CatalogProductVariant {
  uploadedBy: uploadedBy
  ancestorId: ID
  parentId: ID
}
type uploadedBy {
  name: String
  image: String
  storeName: String
  userId: ID
  FulfillmentMethods: [AvailableFulfillmentMethod]
}
input uploadedByinput {
  name: String
  storeName: String
  image: String
  userId: ID
}
type storeInfo {
  image: String
  storeName: String
  pickUpAddress: String
  city: String
  contactNumber: String
  bankDetail: bankDetailsPayload
  documentDetails: documentsDetailPayload
}
type sellerSoldProductCount {
  count: Int
}
extend type Account {
  productVariants: [ProductVariant]
  identityVerified: Boolean
  orderFulfillment: [Order]
  AccountBook: [AccountBook]
  AvailableFulfillmentMethods: [AvailableFulfillmentMethod]
  storeInfo: storeInfo
  isSeller: Boolean
  sellerSoldProductCount: sellerSoldProductCount
}
type datapayload {
  fullName: String
  gqlType: String
}
type currencyPayload {
  exchangeRate: Int!
  userCurrency: String
}
type addressPayload {
  address1: String
  address2: String
  city: String
  country: String
  fullName: String
  isBillingDefault: Boolean
  isCommercial: Boolean
  isShippingDefault: Boolean
  phone: String
  postal: String
  region: String
}

type workflowPayload {
  status: String
  workflow: [String!]!
}
type itemsPayload {
  _id: ID
  title: String
  subtotal: String

  quantity: Int
}
type shippingPayload {
  _id: ID
  address: addressPayload
  shopId: String
  type: String
  workflow: workflowPayload
  items: [itemsPayload]
}
type Paymentpayload {
  _id: ID
  amount: Float
  data: datapayload
  displayName: String
  method: String
  mode: String
  name: String
  paymentPluginName: String
  processor: String
  riskLevel: String
  shopId: String
  status: String
  transactionId: String
  transactions: [Float]!
  currency: currencyPayload
}

input bankDetailsInput {
  isActive: Boolean
  type: String
  bankName: String
  bankAccountNumber: String
  bankAccountTitle: String
}

type bankDetailsPayload {
  isActive: Boolean
  type: String
  bankName: String
  bankAccountNumber: String
  bankAccountTitle: String
}

input documentsDetailInput {
  cnicNumber: String
  cnicImageFront: String
  cnicImageBack: String
}
type documentsDetailPayload {
  cnicNumber: String
  cnicImageFront: String
  cnicImageBack: String
}
type storeAddressPayload {
  address1: String
  address2: String
  city: String
  country: String
  postalcode: String
}

type updateSellerInfopayload {
  _id: ID
  image: String
  storeName: String
  pickUpAddress: String
  city: String
  name: String
  contactNumber: String
  bankDetail: [bankDetailsPayload]
  documentDetails: documentsDetailPayload
  profilePicture: String
}

type updateSellerInfopayloadForAdmin {
  userId: ID
  storeName: String
  name: String
  newPassword: String
}

type SellerInfo implements Node {
  _id: ID!
  name: String
  storeName: String
  picture: String
  phone: String
  address: String
  vendorProducts: [Product]
}

type SellerInfoConnection {
  edges: [SellerInfoEdge]
  nodes: [SellerInfo]
  pageInfo: PageInfo!
  totalCount: Int!
}

type SellerInfoEdge {
  cursor: ConnectionCursor!
  node: SellerInfo
}

#Information for the Sellers to be displayed on the Seller Dashboard

type SellerInformation implements Node {
  _id: ID!
  name: String
  storeName: String
  picture: String
  phone: String
  address: String
}

type SellerInformationConnection {
  edges: [SellerInformationEdge]
  nodes: [SellerInformation]
  pageInfo: PageInfo!
  totalCount: Int!
}

type SellerInformationEdge {
  cursor: ConnectionCursor!
  node: SellerInformation
}

input updateSellerInput {
  _id: ID
  image: String
  storeName: String
  pickUpAddress: String
  name: String
  city: String
  contactNumber: String
  bankDetail: [bankDetailsInput]
  documentDetails: documentsDetailInput
  profilePicture: String
}

input updateSellerInputForAdmin {
  userId: ID
  newPassword: String
}

type SuccessInfo {
  message: String
  success: Boolean
}
input sellerRegistrationInput {
  _id: ID
  email: String
  storeName: String
  address1: String
  address2: String
  state: String
  city: String
  country: String
  postalcode: String
  phone: String
  fullName: String
  password: String
  discountCode: String
  image: String
  bankDetail: bankDetailsInput
  joiningCode: String
  duration: String
}

enum WorkflowStatus {
  inprogress
  completed
  created
  cancelled
  new
}
type sellerOrder {
  _id: ID
  sellerId: ID!
  accountId: ID
  cartId: ID
  createdAt: DateTime!
  currencyCode: String
  email: String
  discounts: [Float]!
  status: WorkflowStatus
  workflow: workflowPayload
  ordererPreferredLanguage: String
  payments: [Paymentpayload]
  shipping: [shippingPayload]
  referenceId: ID
}

enum SortByField {
  _id
  createdAt
  updatedAt
}
type noOfProduct {
  count: Int
}

type Store implements Node {
  _id: ID!
  name: String
  storeName: String
  phoneNumber: String
  shopId: ID
  storeLogo: String
  isSeller: Boolean
  createdAt: String
  updatedAt: String
  profile: profileDetail
  roles: String
  noOfProduct: noOfProduct
}

type profileDetail {
  firstName: String
  lastName: String
  phone: String
  picture: String
  username: String
}

type StoreConnection {
  edges: [StoreEdge]
  nodes: [Store]
  pageInfo: PageInfo!
  totalCount: Int!
}

type StoreConnectionOptimize {
  edges: [StoreEdge]
  nodes: [Store]
  totalRecords: Int! # Total number of records
  currentPageNo: Int! # Current page number
  isLastPage: Boolean! # Is this the last page?
  startRecord: Int! # The starting record number for this page
  endRecord: Int!
  pageInfo: PageInfo!
  # totalCount: Int!
}

# type Brand implements Node {
#   _id: ID!
#   brandName: String
#   brandCategory: String

# }
# type BrandConnection {
#   edges: [BrandEdge]
#   nodes: [Brand]
#   pageInfo: PageInfo!
#   totalCount: Int!
# }

type StoreEdge {
  cursor: ConnectionCursor!
  node: Store
}
# type BrandEdge {
#   cursor: ConnectionCursor!
#   node: Brand
# }

type sellerOrderconncection {
  "The list of nodes that match the query, wrapped in an edge to provide a cursor string for each"
  edges: [sellerOrderEdge]

  """
  You can request the `nodes` directly to avoid the extra wrapping that `NodeEdge` has,
  if you know you will not need to paginate the results.
  """
  nodes: [sellerOrder]

  "Information to help a client request the next or previous page"
  pageInfo: PageInfo!

  "The total number of nodes that match your query"
  totalCount: Int!
}
type sellerOrderEdge {
  "The cursor that represents this node in the paginated results"
  cursor: ConnectionCursor!

  "The product"
  node: sellerOrder
}

type meta {
  field: String
}

enum EventNameEnum {
  SCANNED
  ANDROID
  IOS
  WEB
}

input AnalyticsInput {
  "Api Plugin Seller"
  eventName: EventNameEnum!
  metafields: [MetafieldInput]
}
input CheckAccountInput {
  "The user ID, which is used to check the account is deleted or not"
  userId: ID
}
type discountConnection {
  name: String
  totalCount: Int
}
extend type Account {
  products: [Product]
}
type getAllNewSellerPayload {
  AccountDetail: [Account]
  totalPage: Int
}

type storeDetails {
  id: ID
  name: String
  phoneNumber: String
  email: String
  image: String
  storeName: String
  pickUpAddress: String
  city: String
  contactNumber: String
  bankDetail: bankDetailsPayload
  documentDetails: documentsDetailPayload
  isSeller: Boolean
  referralCode: String
  joiningCode: String
  referredSellersCount: String
  roles: String
  storeAddress: storeAddressPayload
}
type allFeaturedStoreResponse {
  storeName: String
  storeImageUrl: String
  storeSlug: String
  storeId: String
  storeProductId: [String]
}
extend type Mutation {
  updateAccountpayBookEntry(input: accountBookInput): AccountBook
  updateSellerInfo(input: updateSellerInput): updateSellerInfopayload
  updateSellerInfoForAdmin(
    input: updateSellerInputForAdmin
  ): updateSellerInfopayloadForAdmin
  sellerRegistration(input: sellerRegistrationInput): SuccessInfo
  updateAvailableFulfillmentMethodEntry(
    input: AvailableFulfillmentMethodInput
  ): [AvailableFulfillmentMethod]

  createSellerDiscountCode(input: SellerDiscountCodeInput): Boolean
  createAnalytics(input: AnalyticsInput!): Boolean
  createBrands(input: BrandInput): createBrandPayload
  updateBrands(_id: ID!, input: BrandInput): updateBrandPayload
  removeBrands(_id: ID!): Boolean
  deleteAccount(input: CheckAccountInput!): Boolean
}
type Query {
  getAllFeaturedStores(
    limit: Int = 5
    "Return only results that come after this cursor. Use this with `first` to specify the number of results to return."
    after: ConnectionCursor

    "Return only results that come before this cursor. Use this with `last` to specify the number of results to return."
    before: ConnectionCursor

    "Return at most this many results. This parameter may be used with either `after` or `offset` parameters."
    first: ConnectionLimitInt

    "Return at most this many results. This parameter may be used with the `before` parameter."
    last: ConnectionLimitInt

    "Return only results that come after the Nth result. This parameter may be used with the `first` parameter."
    offset: Int

    "Return results sorted in this order"
    sortOrder: SortOrder = asc

    "By default, groups are sorted by when they were created, oldest first. Set this to sort by one of the other allowed fields"
    sortBy: AccountSortByField = createdAt
  ): AccountConnection!

  "Query for a single Product"
  sellerProduct(
    sellerId: ID!

    "Product ID"
    productId: ID!

    "Shop ID"
    shopId: ID!
  ): Product

  "Query for a list of Products"
  sellerProducts(
    "Seller id against which to fetch data"
    sellerId: ID!

    "Filter by archived"
    isArchived: Boolean

    "Filter by visibility"
    isVisible: Boolean

    "Flag to set metafields search method. Default value false, performs a fuzzy search. Explicitly set it to true to perform exact match."
    isExactMatch: Boolean = false

    "Filter by metafield key using `regex` match. To get specific searches send the argument as a regex pattern"
    metafieldKey: String

    "Filter by metafield value using `regex` match. To get specific searches send the argument as a regex pattern"
    metafieldValue: String

    "Filter by price range maximum value"
    priceMax: Float

    "Filter by price range minimum value"
    priceMin: Float

    "List of product IDs to filter by"
    productIds: [ID]

    "Regex metch query string"
    query: String

    "List of shop IDs to filter by"
    shopIds: [ID]!

    "List of tag ids to filter by"
    tagIds: [ID]

    "Return only results that come after this cursor. Use this with `first` to specify the number of results to return."
    after: ConnectionCursor

    "Return only results that come before this cursor. Use this with `last` to specify the number of results to return."
    before: ConnectionCursor

    "Return at most this many results. This parameter may be used with either `after` or `offset` parameters."
    first: ConnectionLimitInt

    "Return at most this many results. This parameter may be used with the `before` parameter."
    last: ConnectionLimitInt

    "Return only results that come after the Nth result. This parameter may be used with the `first` parameter."
    offset: Int

    "Return results sorted in this order"
    sortOrder: SortOrder = desc

    "By default, products are sorted by createdAt. Set this to sort by one of the other allowed fields"
    sortBy: ProductSortByField = createdAt
  ): ProductConnection

  sellerCatalogItems(
    "Provide a list of shop IDs from which you want to get catalog items"
    sellerIds: [ID]!

    storeNameSearch: String

    "Optionally provide a list of tag IDs to further filter the item list"
    tagIds: [ID]

    "Additional filters to apply"
    booleanFilters: [CatalogBooleanFilter]

    "Optional text search query"
    searchQuery: String

    "Return only results that come after this cursor. Use this with `first` to specify the number of results to return."
    after: ConnectionCursor

    "Return only results that come before this cursor. Use this with `last` to specify the number of results to return."
    before: ConnectionCursor

    "Return at most this many results. This parameter may be used with either `after` or `offset` parameters."
    first: ConnectionLimitInt

    "Return at most this many results. This parameter may be used with the `before` parameter."
    last: ConnectionLimitInt

    "Return only results that come after the Nth result. This parameter may be used with the `first` parameter."
    offset: Int

    "Return results sorted in this order"
    sortOrder: SortOrder = desc

    "Provide a Currency code if sortBy is minPrice"
    sortByPriceCurrencyCode: String

    "By default, items are sorted by when they were last updated, most recently updated first. Set this to sort by one of the other allowed fields"
    sortBy: CatalogItemSortByField = updatedAt
  ): CatalogItemConnection

  getSellerOrders(
    sellerId: ID!
    status: WorkflowStatus
    after: ConnectionCursor

    "Return only results that come before this cursor. Use this with `last` to specify the number of results to return."
    before: ConnectionCursor

    "Return at most this many results. This parameter may be used with either `after` or `offset` parameters."
    first: ConnectionLimitInt

    "Return at most this many results. This parameter may be used with the `before` parameter."
    last: ConnectionLimitInt

    "Return only results that come after the Nth result. This parameter may be used with the `first` parameter."
    offset: Int

    "Return results sorted in this order"
    sortOrder: SortOrder = desc
    shopId: ID!
  ): sellerOrderconncection

  getAllSeller(
    limit: Int = 10
    offset: Int = 0
    searchQuery: String
  ): [SellerInfo]

  getAllStore(
    after: ConnectionCursor
    first: ConnectionLimitInt
    last: ConnectionLimitInt
    before: ConnectionCursor
    sortOrder: SortOrder = desc
    offset: Int
    sortBy: SortByField = createdAt
    searchQuery: String
    storeNameSearch: String
  ): StoreConnection!

  getAllStoreOptimize(
    after: ConnectionCursor
    first: ConnectionLimitInt
    last: ConnectionLimitInt
    before: ConnectionCursor
    offset: Int
    searchQuery: String
    storeNameSearch: String
  ): StoreConnectionOptimize!

  getAllBrands(
    searchQuery: String

    "Return only results that come after this cursor. Use this with `first` to specify the number of results to return."
    after: ConnectionCursor

    "Return only results that come before this cursor. Use this with `last` to specify the number of results to return."
    before: ConnectionCursor

    "Return at most this many results. This parameter may be used with either `after` or `offset` parameters."
    first: ConnectionLimitInt

    "Return at most this many results. This parameter may be used with the `before` parameter."
    last: ConnectionLimitInt

    "Return only results that come after the Nth result. This parameter may be used with the `first` parameter."
    offset: Int

    "Return results sorted in this order"
    sortOrder: SortOrder = asc

    "By default, tags are sorted by ID. Set this to sort by one of the other allowed fields"
    sortBy: BrandSortByField = createdAt
  ): TagConnection

  discount: [discountConnection]

  getAllReferalCodeSeller(
    after: ConnectionCursor
    first: ConnectionLimitInt
    last: ConnectionLimitInt
    before: ConnectionCursor
    sortOrder: SortOrder = desc
    offset: Int
    sortBy: SortByField = createdAt
    searchQuery: String
  ): SellerInfoConnection!
  getAllReferalCodeCustomer(
    after: ConnectionCursor
    first: ConnectionLimitInt
    last: ConnectionLimitInt
    before: ConnectionCursor
    sortOrder: SortOrder = desc
    offset: Int
    sortBy: SortByField = createdAt
    searchQuery: String
  ): OrderConnection!

  getAllNewSeller(
    # after: ConnectionCursor
    # first: ConnectionLimitInt
    # last: ConnectionLimitInt
    # before: ConnectionCursor
    # sortOrder: SortOrder = desc
    # offset: Int
    # sortBy: SortByField = createdAt
    # searchQuery: String
    PageNumber: Int
    itemPerPage: Int
    tagsId: String
  ): getAllNewSellerPayload
  sellerDetails(sellerId: ID!): storeDetails
}
